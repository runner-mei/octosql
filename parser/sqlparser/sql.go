// Code generated by goyacc -v test.out -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	commonTableExpression            *CommonTableExpression
	commonTableExpressions           CommonTableExpressions
	with                             *With
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	triggers                         []Trigger
	trigger                          Trigger
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const WATERMARK = 57362
const DELAY = 57363
const COUNTING = 57364
const AFTER = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const KEY = 57374
const DEFAULT = 57375
const SET = 57376
const LOCK = 57377
const UNLOCK = 57378
const KEYS = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const RIGHTARROW = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const INTERVAL = 57442
const JSON_EXTRACT_OP = 57443
const JSON_UNQUOTE_EXTRACT_OP = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const FLUSH = 57451
const SCHEMA = 57452
const TABLE = 57453
const DESCRIPTOR = 57454
const INDEX = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const UNIQUE = 57460
const PRIMARY = 57461
const COLUMN = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const KEY_BLOCK_SIZE = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const WARNINGS = 57492
const BEGIN = 57493
const START = 57494
const TRANSACTION = 57495
const COMMIT = 57496
const ROLLBACK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const GEOMETRY = 57531
const POINT = 57532
const LINESTRING = 57533
const POLYGON = 57534
const GEOMETRYCOLLECTION = 57535
const MULTIPOINT = 57536
const MULTILINESTRING = 57537
const MULTIPOLYGON = 57538
const NULLX = 57539
const AUTO_INCREMENT = 57540
const APPROXNUM = 57541
const SIGNED = 57542
const UNSIGNED = 57543
const ZEROFILL = 57544
const COLLATION = 57545
const DATABASES = 57546
const SCHEMAS = 57547
const TABLES = 57548
const VITESS_KEYSPACES = 57549
const VITESS_SHARDS = 57550
const VITESS_TABLETS = 57551
const VSCHEMA = 57552
const VSCHEMA_TABLES = 57553
const VITESS_TARGET = 57554
const FULL = 57555
const PROCESSLIST = 57556
const COLUMNS = 57557
const FIELDS = 57558
const ENGINES = 57559
const PLUGINS = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const TIMESTAMPADD = 57590
const TIMESTAMPDIFF = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const QUERY = 57597
const EXPANSION = 57598
const UNUSED = 57599

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"WATERMARK",
	"DELAY",
	"COUNTING",
	"AFTER",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	165, 304,
	166, 304,
	-2, 294,
	-1, 281,
	117, 660,
	-2, 656,
	-1, 282,
	117, 661,
	-2, 657,
	-1, 350,
	86, 840,
	-2, 68,
	-1, 351,
	86, 796,
	-2, 69,
	-1, 356,
	86, 773,
	-2, 622,
	-1, 358,
	86, 817,
	-2, 624,
	-1, 633,
	1, 356,
	12, 356,
	13, 356,
	14, 356,
	15, 356,
	17, 356,
	19, 356,
	34, 356,
	35, 356,
	46, 356,
	47, 356,
	48, 356,
	49, 356,
	50, 356,
	52, 356,
	53, 356,
	56, 356,
	57, 356,
	59, 356,
	60, 356,
	162, 356,
	275, 356,
	-2, 383,
	-1, 637,
	57, 49,
	59, 49,
	-2, 53,
	-1, 783,
	117, 663,
	-2, 659,
	-1, 1010,
	5, 35,
	-2, 450,
	-1, 1289,
	5, 35,
	-2, 597,
	-1, 1431,
	5, 35,
	-2, 600,
}

const yyPrivate = 57344

const yyLast = 13702

var yyAct = [...]int{

	282, 1478, 1468, 1252, 1417, 1043, 1138, 1065, 286, 589,
	1328, 629, 1362, 1443, 1063, 312, 1315, 1189, 299, 257,
	865, 588, 3, 1044, 66, 1186, 974, 1226, 1071, 1196,
	1190, 895, 62, 206, 870, 58, 867, 66, 1092, 904,
	66, 894, 938, 1202, 355, 733, 1161, 818, 1002, 808,
	248, 815, 747, 1118, 650, 1109, 891, 836, 785, 908,
	856, 518, 524, 649, 458, 533, 313, 52, 934, 349,
	849, 284, 541, 344, 256, 630, 269, 341, 346, 639,
	57, 1471, 1449, 604, 1466, 1429, 1463, 1253, 25, 1448,
	1428, 25, 1178, 1281, 463, 61, 249, 250, 251, 252,
	1220, 918, 255, 603, 651, 25, 652, 957, 885, 924,
	216, 212, 1080, 213, 214, 1079, 1038, 254, 1081, 52,
	1039, 1221, 1222, 1346, 512, 956, 1390, 253, 554, 553,
	563, 564, 556, 557, 558, 559, 560, 561, 562, 555,
	55, 186, 565, 55, 324, 817, 330, 331, 328, 329,
	327, 326, 325, 961, 1100, 491, 476, 55, 886, 887,
	332, 333, 955, 917, 1318, 508, 841, 925, 188, 189,
	190, 191, 192, 509, 506, 507, 208, 207, 210, 22,
	1334, 1272, 1270, 511, 247, 501, 502, 1141, 722, 1140,
	720, 1423, 66, 206, 1465, 1460, 1418, 66, 1137, 66,
	850, 1410, 909, 1363, 1486, 477, 1162, 465, 210, 66,
	1125, 1142, 66, 952, 949, 950, 1365, 948, 66, 726,
	1482, 66, 493, 721, 206, 495, 206, 206, 911, 206,
	206, 713, 206, 215, 206, 464, 273, 1215, 911, 1123,
	1214, 1213, 1371, 206, 1164, 1066, 1068, 461, 723, 959,
	962, 265, 468, 220, 1134, 492, 494, 1093, 211, 1397,
	1136, 968, 66, 881, 967, 577, 578, 1019, 1292, 1148,
	1076, 1029, 209, 996, 756, 645, 206, 1166, 545, 1170,
	483, 1165, 526, 1163, 892, 954, 1364, 530, 1168, 565,
	488, 1238, 488, 488, 1212, 488, 488, 1167, 488, 529,
	488, 1391, 195, 753, 514, 515, 1427, 953, 1124, 488,
	1169, 1171, 925, 1129, 1126, 1119, 1127, 1122, 1180, 459,
	1016, 1120, 1121, 976, 1067, 540, 910, 52, 1480, 528,
	837, 1481, 52, 1479, 555, 1128, 910, 565, 196, 66,
	66, 66, 715, 1239, 490, 1372, 1370, 574, 206, 538,
	576, 958, 457, 23, 206, 473, 23, 527, 1135, 1408,
	1133, 1380, 539, 538, 264, 540, 960, 338, 339, 275,
	23, 479, 480, 481, 577, 578, 628, 748, 587, 540,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 1200,
	602, 605, 605, 605, 611, 605, 605, 611, 605, 619,
	620, 621, 622, 623, 624, 975, 634, 911, 531, 607,
	609, 489, 613, 615, 755, 618, 653, 1487, 638, 470,
	1098, 471, 643, 516, 472, 1413, 647, 577, 578, 606,
	608, 610, 612, 614, 616, 617, 459, 466, 467, 837,
	1014, 1026, 1013, 554, 553, 563, 564, 556, 557, 558,
	559, 560, 561, 562, 555, 754, 1488, 565, 66, 539,
	538, 535, 749, 206, 1015, 914, 1435, 792, 66, 66,
	206, 915, 539, 538, 66, 55, 540, 66, 1324, 288,
	66, 790, 791, 789, 66, 788, 206, 206, 1437, 540,
	1323, 206, 206, 206, 66, 206, 206, 1003, 759, 760,
	539, 538, 206, 206, 809, 910, 810, 1182, 1113, 1112,
	907, 905, 1101, 906, 539, 538, 1409, 540, 903, 909,
	556, 557, 558, 559, 560, 561, 562, 555, 735, 488,
	565, 540, 517, 206, 1341, 1406, 488, 66, 775, 777,
	778, 1321, 1145, 206, 776, 1110, 539, 538, 1255, 762,
	761, 1093, 488, 488, 727, 1368, 1464, 488, 488, 488,
	1088, 488, 488, 540, 786, 993, 994, 995, 488, 488,
	554, 553, 563, 564, 556, 557, 558, 559, 560, 561,
	562, 555, 811, 1082, 565, 1083, 732, 206, 1439, 517,
	783, 781, 1368, 1421, 517, 52, 858, 861, 862, 863,
	859, 731, 860, 864, 352, 827, 830, 716, 764, 714,
	517, 838, 711, 822, 485, 779, 1368, 517, 1368, 1398,
	206, 206, 1368, 1367, 1313, 1312, 1377, 66, 521, 525,
	1294, 517, 1291, 517, 1376, 66, 478, 66, 1245, 1244,
	66, 66, 1235, 52, 66, 66, 66, 206, 546, 812,
	813, 558, 559, 560, 561, 562, 555, 1072, 591, 565,
	206, 1241, 1242, 1241, 1240, 834, 1008, 517, 912, 872,
	311, 853, 517, 1072, 846, 59, 876, 820, 517, 1187,
	878, 1151, 1199, 590, 302, 301, 304, 305, 306, 307,
	735, 1454, 601, 303, 308, 660, 659, 763, 1199, 820,
	641, 868, 869, 204, 853, 875, 634, 640, 874, 852,
	634, 1287, 883, 1379, 66, 206, 882, 206, 879, 1008,
	1199, 206, 206, 66, 66, 899, 66, 66, 853, 1008,
	66, 206, 641, 1243, 853, 1211, 1084, 884, 823, 824,
	1032, 1031, 829, 832, 833, 1008, 642, 66, 644, 66,
	66, 640, 66, 940, 646, 819, 821, 757, 725, 352,
	261, 55, 1450, 575, 1330, 919, 1299, 845, 1284, 847,
	848, 920, 921, 922, 923, 266, 936, 937, 642, 1139,
	640, 488, 939, 488, 926, 927, 928, 931, 932, 933,
	1283, 1231, 858, 861, 862, 863, 859, 488, 860, 864,
	1087, 783, 983, 1203, 1204, 786, 935, 554, 553, 563,
	564, 556, 557, 558, 559, 560, 561, 562, 555, 633,
	984, 565, 930, 929, 986, 1446, 1445, 55, 942, 554,
	553, 563, 564, 556, 557, 558, 559, 560, 561, 562,
	555, 1473, 1469, 565, 1233, 1206, 1187, 1114, 998, 997,
	751, 729, 770, 1209, 66, 66, 66, 66, 66, 1444,
	1208, 1045, 1055, 354, 1052, 1046, 66, 1056, 1049, 66,
	206, 1040, 1053, 1051, 66, 1458, 66, 1054, 270, 271,
	750, 858, 861, 862, 863, 859, 1447, 860, 864, 1147,
	822, 1203, 1204, 1025, 354, 206, 354, 354, 980, 354,
	354, 279, 354, 534, 354, 1074, 1070, 1075, 772, 773,
	1452, 991, 1073, 354, 990, 992, 1041, 1042, 532, 1105,
	634, 634, 634, 634, 634, 1058, 1085, 658, 985, 519,
	1047, 1048, 486, 1050, 1057, 868, 862, 863, 1069, 1077,
	1097, 1415, 634, 206, 206, 520, 543, 1094, 1414, 1344,
	1095, 1089, 1285, 1326, 945, 728, 866, 782, 267, 268,
	534, 590, 1007, 262, 825, 826, 1090, 1091, 1456, 1455,
	258, 989, 206, 1384, 259, 1332, 59, 1383, 1005, 988,
	1023, 1104, 1006, 1106, 1107, 1108, 1111, 1072, 66, 1010,
	1011, 1012, 510, 1475, 1474, 1475, 1018, 206, 1117, 1021,
	1022, 1020, 1017, 1130, 746, 1028, 536, 1394, 1319, 1030,
	488, 752, 1033, 1034, 1035, 1036, 185, 187, 354, 56,
	1, 1467, 1254, 890, 655, 1327, 1144, 951, 787, 1416,
	1102, 1103, 1361, 1225, 1060, 902, 893, 194, 488, 456,
	193, 1407, 206, 206, 1188, 901, 900, 1045, 1155, 1154,
	1369, 1317, 913, 1099, 916, 1191, 1160, 1232, 352, 1179,
	1096, 1412, 1173, 1193, 1172, 666, 664, 665, 663, 668,
	206, 896, 1198, 667, 783, 983, 662, 232, 347, 654,
	941, 537, 197, 1132, 1131, 206, 947, 206, 206, 504,
	505, 234, 573, 1207, 987, 1078, 353, 1194, 1442, 1216,
	1422, 758, 1219, 523, 1382, 1331, 1192, 1217, 52, 1024,
	600, 835, 287, 774, 633, 66, 300, 297, 1224, 633,
	298, 765, 1037, 633, 981, 982, 1223, 525, 1228, 1229,
	1230, 547, 66, 354, 285, 277, 632, 625, 206, 857,
	354, 206, 206, 66, 855, 854, 342, 1205, 1201, 206,
	1303, 1061, 66, 1062, 631, 1150, 354, 354, 1280, 1236,
	1237, 354, 354, 354, 1389, 354, 354, 769, 782, 1247,
	27, 1259, 354, 354, 1159, 184, 272, 19, 18, 1260,
	17, 1248, 20, 1250, 16, 15, 14, 474, 1261, 31,
	1009, 579, 580, 581, 582, 583, 584, 585, 586, 21,
	13, 12, 11, 766, 10, 9, 8, 1027, 1045, 1268,
	7, 6, 206, 543, 1286, 5, 354, 4, 634, 60,
	260, 263, 24, 1296, 206, 2, 1302, 0, 1210, 0,
	0, 1301, 206, 0, 1295, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 1279, 0, 206, 0, 0,
	0, 0, 0, 0, 206, 1085, 0, 814, 0, 0,
	0, 0, 0, 0, 1265, 1266, 0, 1267, 0, 787,
	1269, 0, 1271, 839, 0, 0, 0, 0, 0, 0,
	1307, 1308, 1309, 0, 0, 0, 0, 0, 0, 0,
	843, 844, 206, 206, 0, 206, 0, 0, 0, 0,
	206, 0, 66, 1191, 0, 0, 896, 0, 206, 206,
	206, 66, 1347, 488, 206, 1352, 1353, 354, 1345, 0,
	0, 1262, 0, 0, 1357, 1358, 1359, 0, 1264, 1314,
	354, 206, 0, 633, 633, 633, 633, 633, 1373, 1273,
	1274, 1366, 0, 872, 0, 1360, 1146, 1381, 633, 0,
	1320, 0, 1322, 0, 1192, 633, 66, 1348, 0, 1288,
	1289, 1290, 1191, 1293, 1395, 1400, 0, 1399, 1404, 206,
	1396, 0, 1355, 1356, 1405, 0, 1333, 1374, 0, 1375,
	206, 206, 0, 1310, 0, 354, 0, 354, 0, 0,
	1419, 963, 964, 1378, 1425, 0, 1181, 0, 206, 1278,
	1430, 354, 0, 1045, 0, 0, 636, 0, 1153, 0,
	0, 66, 1420, 1192, 0, 52, 0, 0, 0, 206,
	0, 0, 634, 0, 0, 0, 0, 354, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1183, 1218, 218, 1451, 1453, 0, 1340, 0, 784,
	0, 206, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 1459, 1461, 0,
	1472, 0, 0, 0, 0, 0, 0, 1483, 554, 553,
	563, 564, 556, 557, 558, 559, 560, 561, 562, 555,
	0, 0, 565, 0, 0, 0, 896, 0, 896, 0,
	0, 0, 1385, 1386, 1387, 1388, 683, 842, 0, 1392,
	1393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 839, 1401, 1402, 1403, 0, 0, 0,
	0, 0, 1470, 487, 0, 0, 0, 0, 0, 0,
	1064, 553, 563, 564, 556, 557, 558, 559, 560, 561,
	562, 555, 1282, 0, 565, 0, 1426, 0, 0, 0,
	1153, 0, 590, 1431, 0, 354, 1433, 1434, 0, 0,
	1297, 0, 522, 1298, 0, 0, 1300, 0, 0, 0,
	0, 0, 1304, 1438, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 343, 0,
	0, 0, 0, 460, 0, 462, 0, 0, 0, 219,
	0, 0, 246, 1115, 354, 469, 0, 0, 475, 0,
	0, 0, 0, 684, 482, 0, 0, 484, 0, 0,
	0, 633, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 0, 354, 1484, 1485, 697, 700, 701, 702, 703,
	704, 705, 0, 706, 707, 708, 709, 710, 685, 686,
	687, 688, 669, 670, 698, 1329, 672, 354, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 689, 690,
	691, 692, 693, 694, 695, 696, 0, 0, 0, 0,
	0, 0, 999, 1000, 1001, 0, 0, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 549, 839,
	552, 0, 1195, 1197, 0, 0, 566, 567, 568, 569,
	570, 571, 572, 0, 550, 551, 548, 0, 554, 553,
	563, 564, 556, 557, 558, 559, 560, 561, 562, 555,
	1197, 699, 565, 0, 0, 627, 0, 637, 0, 0,
	0, 0, 0, 1424, 590, 354, 0, 354, 1227, 496,
	497, 276, 498, 499, 345, 500, 1277, 503, 0, 219,
	0, 219, 0, 0, 1156, 0, 513, 0, 0, 0,
	0, 219, 0, 0, 219, 0, 0, 0, 0, 0,
	219, 1329, 896, 219, 0, 554, 553, 563, 564, 556,
	557, 558, 559, 560, 561, 562, 555, 0, 1251, 565,
	0, 1256, 1257, 0, 0, 0, 1457, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 63, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 553, 563, 564, 556,
	557, 558, 559, 560, 561, 562, 555, 0, 0, 565,
	0, 0, 0, 0, 661, 1276, 0, 0, 0, 0,
	839, 0, 0, 0, 717, 718, 0, 0, 0, 0,
	724, 0, 1064, 343, 0, 0, 730, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 0, 0, 0, 0,
	741, 0, 1316, 0, 0, 1157, 1158, 0, 0, 0,
	0, 219, 219, 219, 0, 0, 0, 354, 1174, 1175,
	0, 1176, 1177, 0, 354, 1275, 0, 0, 0, 0,
	0, 0, 0, 1184, 1185, 0, 0, 0, 0, 0,
	0, 0, 0, 771, 554, 553, 563, 564, 556, 557,
	558, 559, 560, 561, 562, 555, 0, 0, 565, 0,
	0, 0, 1349, 1350, 0, 1351, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 0, 1316, 1316,
	1316, 0, 0, 0, 1227, 563, 564, 556, 557, 558,
	559, 560, 561, 562, 555, 0, 712, 565, 0, 1234,
	0, 1316, 0, 719, 554, 553, 563, 564, 556, 557,
	558, 559, 560, 561, 562, 555, 0, 0, 565, 736,
	737, 0, 0, 0, 738, 739, 740, 839, 742, 743,
	219, 0, 0, 851, 0, 744, 745, 0, 0, 1411,
	219, 219, 0, 0, 0, 0, 219, 877, 1004, 219,
	354, 354, 219, 0, 0, 0, 734, 0, 1263, 0,
	0, 0, 0, 0, 0, 839, 219, 0, 1432, 554,
	553, 563, 564, 556, 557, 558, 559, 560, 561, 562,
	555, 0, 0, 565, 0, 0, 0, 0, 0, 1440,
	554, 553, 563, 564, 556, 557, 558, 559, 560, 561,
	562, 555, 0, 0, 565, 0, 0, 0, 0, 219,
	0, 25, 26, 53, 28, 29, 0, 0, 734, 0,
	943, 1316, 0, 0, 0, 0, 0, 0, 0, 965,
	966, 0, 969, 970, 44, 0, 971, 0, 0, 30,
	49, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 979, 39,
	276, 0, 0, 55, 0, 276, 276, 0, 0, 276,
	276, 276, 0, 0, 0, 840, 0, 1335, 1336, 1337,
	1338, 1339, 0, 0, 0, 1342, 1343, 0, 0, 0,
	0, 0, 0, 0, 276, 276, 276, 276, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 63,
	0, 0, 219, 219, 0, 0, 219, 880, 734, 0,
	0, 229, 0, 0, 0, 32, 33, 35, 34, 37,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 0, 944, 0,
	946, 0, 0, 38, 45, 46, 0, 0, 47, 48,
	36, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 41, 0, 42, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 219, 221, 219, 219,
	0, 0, 219, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 228, 0, 0, 0, 0, 219,
	0, 977, 978, 0, 219, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 231, 0, 0, 0, 0,
	0, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 23, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 0, 0, 0, 1149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 235, 225, 226, 276, 236, 237,
	238, 240, 0, 239, 245, 0, 0, 0, 227, 230,
	0, 223, 244, 243, 0, 840, 219, 219, 219, 219,
	219, 0, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 219, 0, 0, 0, 0, 63, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 443, 431, 219, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 205, 0, 897,
	898, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 1086, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 205, 0, 897,
	898, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 55, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	1152, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	780, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 357,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 358, 356, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 648, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 357,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 358, 356, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 348, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 357,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 358, 356, 351, 350, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	283, 0, 0, 0, 91, 0, 280, 0, 0, 0,
	108, 323, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 314, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 281, 302, 301, 304, 305, 306,
	307, 0, 0, 82, 303, 308, 309, 310, 0, 0,
	0, 278, 295, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 0,
	0, 336, 0, 294, 0, 0, 289, 290, 291, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 1305, 1306, 0, 170, 0, 0, 334, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 324, 335, 330, 331, 328, 329, 327, 326,
	325, 337, 316, 317, 318, 319, 321, 0, 332, 333,
	320, 68, 75, 109, 0, 136, 94, 166, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 283, 0, 0,
	0, 91, 0, 280, 0, 0, 0, 108, 323, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 314, 315,
	0, 0, 0, 0, 0, 0, 888, 0, 55, 0,
	0, 281, 302, 301, 304, 305, 306, 307, 0, 0,
	82, 303, 308, 309, 310, 889, 0, 0, 278, 295,
	0, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 0, 0, 336, 0,
	294, 0, 0, 289, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 334, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 324,
	335, 330, 331, 328, 329, 327, 326, 325, 337, 316,
	317, 318, 319, 321, 25, 332, 333, 320, 68, 75,
	109, 0, 136, 94, 166, 0, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 283, 0, 0, 0, 91,
	0, 280, 0, 0, 0, 108, 323, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 314, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 281,
	302, 301, 304, 305, 306, 307, 0, 0, 82, 303,
	308, 309, 310, 0, 0, 0, 278, 295, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 0, 0, 336, 0, 294, 0,
	0, 289, 290, 291, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 334, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 324, 335, 330,
	331, 328, 329, 327, 326, 325, 337, 316, 317, 318,
	319, 321, 0, 332, 333, 320, 68, 75, 109, 23,
	136, 94, 166, 127, 0, 180, 89, 85, 67, 0,
	816, 0, 283, 0, 0, 0, 91, 0, 280, 0,
	0, 0, 108, 323, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 314, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 281, 302, 301, 304,
	305, 306, 307, 0, 0, 82, 303, 308, 309, 310,
	0, 0, 0, 278, 295, 0, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 274,
	0, 0, 0, 336, 0, 294, 0, 0, 289, 290,
	291, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 170, 0, 0, 334,
	0, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 0, 0, 0, 86, 0, 141, 129,
	163, 0, 130, 140, 111, 156, 135, 0, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	0, 0, 149, 165, 183, 80, 0, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 324, 335, 330, 331, 328, 329,
	327, 326, 325, 337, 316, 317, 318, 319, 321, 0,
	332, 333, 320, 68, 75, 109, 0, 136, 94, 166,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 283,
	0, 0, 0, 91, 0, 280, 0, 0, 0, 108,
	323, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	314, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 517, 281, 302, 301, 304, 305, 306, 307,
	0, 0, 82, 303, 308, 309, 310, 0, 0, 0,
	278, 295, 0, 322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 0, 0,
	336, 0, 294, 0, 0, 289, 290, 291, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 334, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 324, 335, 330, 331, 328, 329, 327, 326, 325,
	337, 316, 317, 318, 319, 321, 0, 332, 333, 320,
	68, 75, 109, 0, 136, 94, 166, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 283, 0, 0, 0,
	91, 0, 280, 0, 0, 0, 108, 323, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 314, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	281, 302, 301, 304, 305, 306, 307, 0, 0, 82,
	303, 308, 309, 310, 0, 0, 0, 278, 295, 0,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 274, 0, 0, 0, 336, 0, 294,
	0, 0, 289, 290, 291, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 334, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 324, 335,
	330, 331, 328, 329, 327, 326, 325, 337, 316, 317,
	318, 319, 321, 0, 332, 333, 320, 68, 75, 109,
	0, 136, 94, 166, 127, 0, 180, 89, 85, 67,
	0, 0, 0, 283, 0, 0, 0, 91, 0, 280,
	0, 0, 0, 108, 323, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 314, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 281, 302, 831,
	304, 305, 306, 307, 0, 0, 82, 303, 308, 309,
	310, 0, 0, 0, 278, 295, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	274, 0, 0, 0, 336, 0, 294, 0, 0, 289,
	290, 291, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	334, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 324, 335, 330, 331, 328,
	329, 327, 326, 325, 337, 316, 317, 318, 319, 321,
	0, 332, 333, 320, 68, 75, 109, 0, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	283, 0, 0, 0, 91, 0, 280, 0, 0, 0,
	108, 323, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 314, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 281, 302, 828, 304, 305, 306,
	307, 0, 0, 82, 303, 308, 309, 310, 0, 0,
	0, 278, 295, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 274, 0, 0,
	0, 336, 0, 294, 0, 0, 289, 290, 291, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 334, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 324, 335, 330, 331, 328, 329, 327, 326,
	325, 337, 316, 317, 318, 319, 321, 0, 332, 333,
	320, 68, 75, 109, 0, 136, 94, 166, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 283, 0, 0,
	0, 91, 0, 280, 0, 0, 0, 108, 323, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 314, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 281, 302, 301, 304, 305, 306, 307, 0, 0,
	82, 303, 308, 309, 310, 0, 0, 0, 278, 295,
	0, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 0, 0, 336, 0,
	294, 0, 0, 289, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 334, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 324,
	335, 330, 331, 328, 329, 327, 326, 325, 337, 316,
	317, 318, 319, 321, 0, 332, 333, 320, 68, 75,
	109, 0, 136, 94, 166, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 108, 323, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 314, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 281, 302,
	301, 304, 305, 306, 307, 0, 0, 82, 303, 308,
	309, 310, 0, 0, 0, 0, 295, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 0, 0, 0, 0, 336, 0, 294, 0, 0,
	289, 290, 291, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 334, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 1477, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 324, 335, 330, 331,
	328, 329, 327, 326, 325, 337, 316, 317, 318, 319,
	321, 0, 332, 333, 320, 68, 75, 109, 0, 136,
	94, 166, 127, 0, 180, 89, 85, 67, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 108, 323, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 314, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 517, 281, 302, 301, 304, 305,
	306, 307, 0, 0, 82, 303, 308, 309, 310, 0,
	0, 0, 0, 295, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	0, 0, 336, 0, 294, 0, 0, 289, 290, 291,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 334, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 324, 335, 330, 331, 328, 329, 327,
	326, 325, 337, 316, 317, 318, 319, 321, 0, 332,
	333, 320, 68, 75, 109, 0, 136, 94, 166, 127,
	0, 180, 89, 85, 67, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 108, 323,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 314,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 281, 302, 301, 304, 305, 306, 307, 0,
	0, 82, 303, 308, 309, 310, 0, 0, 0, 0,
	295, 0, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 289, 290, 291, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 334, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	324, 335, 330, 331, 328, 329, 327, 326, 325, 337,
	316, 317, 318, 319, 321, 0, 332, 333, 320, 68,
	75, 109, 0, 136, 94, 166, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 563, 564,
	556, 557, 558, 559, 560, 561, 562, 555, 0, 0,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 180, 89,
	85, 67, 0, 0, 542, 0, 68, 75, 109, 91,
	136, 94, 166, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 544, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 539, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 0, 68, 75, 109, 91,
	136, 94, 166, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 201, 202, 0, 0, 198,
	0, 0, 0, 203, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 25, 0, 0, 0, 0, 68, 75, 109, 0,
	136, 94, 166, 127, 0, 180, 89, 85, 67, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 0, 0, 0, 86, 0, 141, 129,
	163, 0, 130, 140, 111, 156, 135, 0, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	0, 0, 149, 165, 183, 80, 0, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 0, 25, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 180,
	89, 85, 67, 68, 75, 109, 23, 136, 94, 166,
	91, 0, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 75, 109,
	23, 136, 94, 166, 127, 0, 180, 89, 85, 67,
	0, 0, 873, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 0, 108, 0, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 64,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 180, 89, 85, 67,
	0, 0, 873, 0, 68, 75, 109, 91, 136, 94,
	166, 0, 0, 108, 0, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 64,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 871, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 180, 89, 85, 67,
	0, 0, 0, 0, 68, 75, 109, 91, 136, 94,
	166, 0, 0, 108, 0, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	767, 0, 0, 768, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 68, 75, 109, 0, 136, 94,
	166, 91, 0, 657, 0, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 656, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 64, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 544, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 75,
	109, 0, 136, 94, 166, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 0, 0, 626, 91, 0,
	0, 0, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 340, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 217, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 75, 109, 0, 136,
	94, 166,
}
var yyPact = [...]int{

	2105, -1000, -195, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 961, 11730, 1011, -1000, -1000, -1000, -1000, -1000,
	-1000, 244, 9768, 45, 130, -17, 12707, 125, 2184, 13187,
	-1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -96,
	-106, -1000, 99, -1000, -1000, -1000, -1000, -1000, 953, 958,
	701, -1000, 937, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 769, 934, 834, -1000, 7489, 75,
	75, 12467, 5946, -1000, -1000, 258, 13187, 117, 13187, -164,
	73, 73, 73, -1000, -1000, -1000, -1000, 124, 13187, 299,
	-1000, 13187, 71, 575, 71, 71, 71, 13187, -1000, 163,
	13187, 553, 898, 3516, 94, 3516, 3516, -1000, 3516, 3516,
	-1000, 3516, 20, 3516, -58, 980, -1000, -1000, -1000, -1000,
	-40, -1000, 3516, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 534, 910, 8260, 8260,
	99, 11730, 703, 961, -1000, 99, -1000, -1000, -1000, 878,
	-1000, -1000, 392, 995, -1000, 9528, 161, -1000, 8260, 1630,
	703, -1000, -1000, 703, -1000, -1000, 147, -1000, -1000, 9031,
	9031, 9031, 9031, 9031, 9031, 9031, 9031, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 703, -1000, 6718, 703, 703, 703, 703, 703, 703,
	703, 703, 8260, 703, 703, 703, 703, 703, 703, 703,
	703, 703, 703, 703, 703, 703, 703, 703, 12227, 11490,
	13187, 721, 689, -1000, -1000, 158, 695, 5676, -136, -1000,
	-1000, -1000, 330, 11250, -1000, -1000, -1000, 893, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 636, 13187, -1000, 1472,
	-1000, 551, 3516, 100, 548, 264, 546, 13187, 13187, 3516,
	27, 60, 120, 13187, 699, 87, 13187, 928, 795, 13187,
	540, 525, -1000, 5406, -1000, 3516, 3516, -1000, -1000, -1000,
	3516, 3516, 3516, 13187, 3516, 3516, -1000, -1000, -1000, -1000,
	-1000, 3516, 3516, -1000, 993, 366, -1000, -1000, -1000, -1000,
	8260, -1000, 794, -1000, -1000, -1000, -1000, -1000, -1000, 1002,
	207, 396, 157, 698, -1000, 470, -1000, -1000, 99, 953,
	534, 834, 11006, 805, -1000, -1000, 13187, -1000, 8260, 8260,
	466, -1000, 11970, -1000, -1000, 4326, 232, 9031, 417, 387,
	9031, 9031, 9031, 9031, 9031, 9031, 9031, 9031, 9031, 9031,
	9031, 9031, 9031, 9031, 9031, 443, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 521, -1000, 99, 622, 622, 177,
	177, 177, 177, 177, 177, 177, 9288, 6975, 534, 618,
	286, 6718, 7489, 7489, 8260, 8260, 8003, 7746, 7489, 935,
	248, 286, 13427, -1000, -1000, 8774, -1000, -1000, -1000, -1000,
	-1000, 534, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12947,
	12947, 7489, 7489, 7489, 7489, 43, 13187, -1000, 675, 746,
	-1000, -1000, -1000, 930, 10269, 703, 10766, 43, 648, 11490,
	13187, -1000, -1000, 11490, 13187, 4056, 5136, 695, -136, 678,
	-1000, -133, -85, 6460, 172, -1000, -1000, -1000, -1000, 3246,
	375, 608, 393, -55, -1000, -1000, -1000, 707, -1000, 707,
	707, 707, 707, -26, -26, -26, -26, -1000, -1000, -1000,
	-1000, -1000, 765, 764, -1000, 707, 707, 707, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 748, 748, 748, 724,
	724, 771, -1000, 13187, 3516, 927, 3516, -1000, 92, -1000,
	12947, 12947, 13187, 13187, 139, 13187, 13187, 692, -1000, 13187,
	3516, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13187, 311, 13187, 13187,
	286, 13187, -1000, 856, 8260, 8260, 4866, 8260, -1000, -1000,
	-1000, 534, 910, -1000, 935, 960, -1000, 876, 873, 7489,
	-1000, -1000, 232, 272, -1000, -1000, 493, -1000, -1000, -1000,
	-1000, 156, 703, -1000, 1992, -1000, -1000, -1000, -1000, 417,
	9031, 9031, 9031, 345, 1992, 1971, 1885, 1442, 177, 547,
	547, 225, 225, 225, 225, 225, 418, 418, -1000, -1000,
	-1000, 534, -1000, -1000, -1000, 534, 7489, 686, -1000, -1000,
	8260, -1000, 534, 607, 607, 383, 438, 309, 991, 607,
	256, 990, 607, 607, 7489, 357, -1000, 8260, 534, -1000,
	154, -1000, 472, 682, 681, 607, 534, 607, 607, 82,
	703, -1000, 13427, 11490, 11490, 11490, 11490, 11490, -1000, 827,
	818, -1000, 826, 816, 888, 13187, -1000, 612, 10269, 12947,
	191, 703, -1000, 11730, 975, 11490, 645, -1000, 645, -1000,
	153, -1000, -1000, 678, -136, -130, -1000, -1000, -1000, -1000,
	286, -1000, 522, 677, 2976, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 742, 499, -1000, 919, 206, 196, 490, 918,
	-1000, -1000, -1000, 907, -1000, 348, -65, -1000, -1000, 448,
	-26, -26, -1000, -1000, 172, 885, 172, 172, 172, 482,
	482, -1000, -1000, -1000, -1000, 445, -1000, -1000, -1000, 444,
	-1000, 791, 12947, 3516, -1000, -1000, -1000, -1000, 178, 178,
	228, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41, 722, -1000, -1000, -1000, 26, 24, 79,
	-1000, 3516, -1000, 366, -1000, 479, 8260, -1000, -1000, -1000,
	846, 286, 286, 152, -1000, -1000, -1000, 13187, -1000, -1000,
	-1000, -1000, 670, -1000, -1000, -1000, 3786, 7489, -1000, 345,
	1992, 1697, -1000, 9031, 9031, -1000, -1000, 607, 7489, 286,
	-1000, -1000, -1000, 93, 443, 93, 9031, 9031, -1000, 9031,
	9031, -1000, -176, 660, 233, -1000, 8260, 424, -1000, 4866,
	-1000, 9031, 9031, -1000, -1000, -1000, -1000, 790, 13427, 703,
	-1000, 10025, 12947, 661, -1000, 303, 746, 747, 789, 835,
	-1000, -1000, -1000, -1000, 814, -1000, 807, -1000, -1000, -1000,
	-1000, 534, 676, -1000, 197, -1000, 111, 110, 107, 12947,
	-1000, 961, 8260, 645, -1000, -1000, 159, -1000, -1000, -142,
	-125, -1000, -1000, -1000, 3246, -1000, 3246, 12947, 58, -1000,
	490, 490, -1000, -1000, -1000, 733, 788, 9031, -1000, -1000,
	-1000, 582, 172, 172, -1000, 230, -1000, -1000, -1000, 604,
	-1000, 602, 674, 579, 13187, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13187, -1000, -1000, -1000, -1000, -1000, 12947, -184, 487,
	12947, 12947, 13187, -1000, 311, -1000, 286, -1000, 4596, -1000,
	975, 11490, -1000, -1000, 534, -1000, 9031, 1992, 1992, -1000,
	-1000, 534, 707, 707, -1000, 707, 724, -1000, 707, 4,
	707, 3, 534, 534, 1906, 1846, 1747, 1380, 703, -171,
	-1000, 286, 8260, -1000, 731, 709, -1000, 921, 623, 652,
	-1000, -1000, 7232, 534, 573, 151, 571, -1000, 961, 13427,
	8260, -1000, -1000, 8260, 708, -1000, 8260, -1000, -1000, -1000,
	930, 12947, 6203, 703, 703, 703, 571, 953, 286, -1000,
	-1000, -1000, -1000, 2976, -1000, 565, -1000, 707, -1000, -1000,
	-1000, 12947, -51, 999, 1992, -1000, -1000, -1000, -1000, -1000,
	-26, 478, -26, 426, -1000, 414, 3516, -1000, -1000, -1000,
	-1000, 923, -1000, 4596, -1000, -1000, 706, -1000, -1000, -1000,
	962, 669, -1000, 1992, -1000, -1000, 119, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9031, 9031, 9031, 9031, 9031,
	534, 471, 286, 9031, 9031, 917, -1000, 703, -1000, -1000,
	85, 12947, 12947, -1000, 12947, 953, -1000, 286, 286, 12947,
	286, 13187, -1000, -1000, 286, 703, 703, 12947, 12947, 12947,
	10526, -1000, 146, 12947, -1000, 563, -1000, 210, -1000, -105,
	172, -1000, 172, 574, 566, -1000, 703, 654, -1000, 275,
	12947, 963, 957, -1000, -1000, 472, 472, 472, 472, 30,
	-1000, -1000, 472, 472, 998, -1000, 703, -1000, 99, 142,
	-1000, -1000, -1000, 559, -1000, 11490, 13427, 557, 557, 557,
	191, 146, -1000, 474, 273, 453, -1000, 55, 12947, 355,
	916, -1000, 909, -1000, -1000, -1000, -1000, -1000, 39, 4596,
	3246, 533, 29, 8260, 8260, -1000, -1000, -1000, -1000, 534,
	37, -187, -1000, -1000, 13427, 652, 534, 12947, -1000, 550,
	534, -1000, -1000, -1000, -1000, -1000, -1000, 402, -1000, -1000,
	13187, -1000, -1000, 425, -1000, -1000, 529, -1000, 12947, -1000,
	-1000, 722, -1000, 803, 286, 640, -1000, 843, -181, -191,
	639, -1000, -1000, -1000, -1000, -1000, 704, -1000, -1000, 39,
	872, -184, 632, -1000, 949, 947, 8260, -1000, 832, -1000,
	12947, -1000, 36, -1000, 803, -1000, 8260, 286, -185, 496,
	34, -1000, 286, -188, 786, 703, -192, 785, -1000, 984,
	8517, -1000, -1000, 986, 186, 186, 472, 534, -1000, -1000,
	-1000, 63, 384, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1225, 21, 179, 1222, 1221, 1220, 95, 1219, 1217,
	1215, 1211, 1210, 1206, 1205, 1204, 1202, 1201, 1200, 1199,
	1189, 1187, 1186, 1185, 1184, 1182, 1180, 1178, 1177, 141,
	1176, 1175, 1170, 65, 1167, 76, 1164, 1158, 48, 145,
	51, 47, 369, 1155, 36, 11, 75, 1154, 1153, 1151,
	14, 1150, 43, 1148, 1147, 77, 1146, 1145, 60, 1144,
	1139, 1406, 1137, 73, 1136, 7, 28, 1135, 1134, 1131,
	1122, 71, 901, 1121, 1120, 18, 1117, 1116, 83, 1113,
	58, 9, 17, 15, 30, 1112, 479, 8, 1111, 57,
	1110, 1109, 1105, 1104, 35, 1103, 62, 1101, 19, 61,
	1100, 1098, 13, 1097, 16, 70, 29, 25, 5, 78,
	63, 1096, 23, 69, 54, 1095, 1094, 177, 1092, 1091,
	52, 1090, 1089, 26, 156, 235, 1086, 1084, 1083, 1082,
	44, 0, 670, 411, 72, 1081, 1080, 1079, 1572, 45,
	32, 34, 20, 50, 1533, 49, 1078, 1077, 46, 1076,
	1073, 1069, 1068, 1067, 1066, 1065, 101, 1061, 1060, 1057,
	109, 56, 1054, 1053, 68, 42, 1052, 1051, 1050, 55,
	64, 1046, 1045, 59, 38, 1041, 1040, 1039, 1037, 1036,
	41, 31, 1035, 27, 1033, 12, 1032, 39, 1029, 4,
	1027, 10, 1025, 3, 1022, 6, 53, 1, 1021, 2,
	1020, 1019, 66, 166, 79, 1017, 103,
}
var yyR1 = [...]int{

	0, 200, 201, 201, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 6, 6,
	8, 8, 7, 9, 3, 4, 5, 5, 10, 10,
	32, 32, 11, 12, 12, 12, 12, 204, 204, 55,
	55, 56, 56, 105, 105, 13, 13, 13, 13, 110,
	110, 114, 114, 114, 115, 115, 115, 115, 146, 146,
	14, 14, 14, 14, 14, 14, 14, 195, 195, 194,
	193, 193, 192, 192, 191, 20, 176, 178, 178, 177,
	177, 177, 177, 170, 149, 149, 149, 149, 152, 152,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 151,
	151, 151, 151, 151, 153, 153, 153, 153, 153, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 155, 155, 155, 155, 155, 155,
	155, 155, 169, 169, 156, 156, 164, 164, 165, 165,
	165, 162, 162, 163, 163, 166, 166, 166, 158, 158,
	159, 159, 167, 167, 160, 160, 160, 161, 161, 161,
	168, 168, 168, 168, 168, 157, 157, 171, 171, 186,
	186, 185, 185, 185, 175, 175, 182, 182, 182, 182,
	182, 173, 173, 174, 174, 184, 184, 183, 172, 172,
	187, 187, 187, 187, 198, 199, 197, 197, 197, 197,
	197, 179, 179, 179, 180, 180, 180, 181, 181, 181,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 190, 188, 188, 189, 189, 16,
	21, 21, 17, 17, 17, 17, 17, 18, 18, 22,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 121, 121, 119, 119, 122, 122, 120, 120,
	120, 123, 123, 123, 147, 147, 147, 24, 24, 26,
	26, 27, 28, 25, 25, 25, 25, 25, 25, 25,
	19, 205, 29, 30, 30, 31, 31, 31, 35, 35,
	35, 33, 33, 34, 34, 40, 40, 39, 39, 41,
	41, 41, 41, 135, 135, 135, 134, 134, 43, 43,
	44, 44, 45, 45, 46, 46, 46, 46, 46, 64,
	64, 49, 49, 48, 48, 50, 51, 51, 51, 104,
	104, 106, 106, 47, 47, 47, 47, 52, 52, 53,
	53, 54, 54, 142, 142, 141, 141, 141, 140, 140,
	57, 57, 57, 59, 58, 58, 58, 58, 60, 60,
	62, 62, 61, 61, 63, 65, 65, 65, 65, 66,
	66, 42, 42, 42, 42, 42, 42, 42, 118, 118,
	68, 68, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 79, 79, 79, 79, 79, 79, 69, 69,
	69, 69, 69, 69, 69, 38, 38, 80, 80, 80,
	86, 81, 81, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 76, 76, 76, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 206, 206, 78,
	77, 77, 77, 77, 77, 77, 36, 36, 36, 36,
	36, 145, 145, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 90, 90, 37, 37,
	88, 88, 89, 91, 91, 87, 87, 87, 71, 71,
	71, 71, 71, 71, 71, 71, 73, 73, 73, 92,
	92, 93, 93, 94, 94, 95, 95, 96, 97, 97,
	97, 98, 98, 98, 98, 99, 99, 99, 100, 100,
	101, 101, 102, 102, 102, 70, 70, 70, 70, 70,
	70, 103, 103, 103, 103, 107, 107, 82, 82, 84,
	84, 83, 85, 108, 108, 112, 109, 109, 113, 113,
	113, 113, 111, 111, 111, 137, 137, 137, 116, 116,
	124, 124, 125, 125, 117, 117, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 127, 127, 127, 128,
	128, 129, 129, 129, 136, 136, 132, 132, 133, 133,
	138, 138, 139, 139, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 202, 203,
	143, 144, 144, 144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 4, 6, 7, 0, 1,
	1, 3, 5, 5, 11, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 7, 5, 5,
	5, 12, 7, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	3, 2, 3, 3, 2, 3, 4, 3, 7, 5,
	4, 2, 4, 2, 2, 2, 2, 3, 3, 5,
	2, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 6, 3,
	7, 0, 1, 1, 3, 3, 1, 4, 4, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 0, 2,
	1, 3, 2, 3, 2, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -200, -1, -2, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -22, -23, -24, -26, -27, -28,
	-25, -19, -3, 271, -4, 6, 7, -32, 9, 10,
	34, -20, 120, 121, 123, 122, 155, 124, 148, 54,
	168, 169, 171, 172, 29, 149, 150, 153, 154, 35,
	36, 126, -202, 8, 258, 58, -201, 275, -94, 15,
	-8, -7, -140, -138, 63, 61, -131, 23, 268, 141,
	168, 179, 173, 200, 192, 269, 142, 190, 193, 237,
	220, 232, 70, 171, 246, 22, 151, 188, 184, 21,
	182, 31, 234, 205, 273, 183, 233, 126, 144, 139,
	206, 210, 238, 177, 178, 240, 204, 140, 37, 270,
	39, 159, 241, 208, 203, 199, 202, 176, 198, 43,
	212, 211, 213, 236, 195, 145, 185, 18, 244, 154,
	157, 235, 207, 209, 136, 161, 272, 242, 181, 146,
	158, 153, 245, 147, 172, 222, 239, 248, 42, 217,
	175, 138, 169, 165, 223, 196, 160, 186, 187, 201,
	174, 197, 170, 155, 247, 218, 274, 194, 191, 166,
	131, 163, 164, 224, 225, 226, 227, 228, 229, 167,
	20, 243, 189, 219, -31, 5, -29, -205, -29, -29,
	-29, -29, -29, -176, -178, 58, 94, -129, 131, 76,
	250, 127, 128, 135, -132, 61, -131, -117, 131, 227,
	133, 128, 128, 130, 131, 250, 127, 128, -61, -138,
	128, 113, 193, 237, 120, 221, 222, 234, 130, 37,
	235, 161, -147, 128, -119, 220, 224, 225, 226, 229,
	227, 167, 61, 239, 238, 230, -138, 170, -143, -143,
	-143, -143, -143, 223, 223, -143, -2, -98, 17, 16,
	-6, 59, 26, -5, -3, -202, 6, 24, 25, -35,
	44, 45, -30, -41, 104, -42, -138, -67, 78, -72,
	33, 61, -131, 27, -71, -68, -87, -85, -86, 113,
	114, 115, 102, 103, 110, 79, 116, -76, -74, -75,
	-77, 63, 62, 71, 64, 65, 66, 67, 72, 73,
	74, -132, -83, -202, 48, 49, 259, 260, 261, 262,
	267, 263, 81, 38, 249, 257, 256, 255, 253, 254,
	251, 252, 265, 266, 134, 250, 108, 258, -117, -117,
	11, -55, -56, -61, -63, -138, -109, -146, 170, -113,
	239, 238, -133, -111, -132, -130, 237, 193, 236, 125,
	77, 26, 28, 215, 80, 113, 16, 81, 112, 259,
	120, 52, 251, 252, 249, 261, 262, 250, 221, 33,
	10, 29, 149, 25, 106, 122, 84, 85, 152, 27,
	150, 74, 19, 55, 11, 13, 14, 134, 133, 96,
	130, 50, 8, 116, 30, 93, 46, 32, 48, 94,
	17, 253, 254, 35, 267, 156, 108, 53, 40, 78,
	72, 75, 56, 76, 15, 51, 95, 123, 258, 49,
	127, 6, 264, 34, 148, 47, 128, 83, 265, 266,
	132, 162, 73, 5, 135, 36, 9, 54, 57, 255,
	256, 257, 38, 82, 12, 271, -177, 94, -170, 61,
	-61, 130, -61, 258, -125, 134, -125, -125, 128, -61,
	120, 122, 125, 56, -21, -61, -124, 134, 61, -124,
	-124, -124, -61, 117, -61, 61, 34, -144, -202, -133,
	250, 61, 161, 128, 162, 131, -144, -144, -144, -144,
	-144, 165, 166, -144, -122, -121, 232, 233, 223, 231,
	12, 223, 164, -144, -143, -143, -203, 60, -99, 19,
	35, -42, -138, -95, -96, -42, -2, -7, -202, -94,
	-2, -29, 40, -33, 25, 69, 11, -135, 77, 76,
	93, -134, 26, -132, 63, 117, -42, -69, 96, 78,
	94, 95, 80, 99, 98, 109, 102, 103, 104, 105,
	106, 107, 108, 100, 101, 112, 86, 87, 88, 89,
	90, 91, 92, -118, -202, -86, -202, 118, 119, -72,
	-72, -72, -72, -72, -72, -72, -72, -202, -2, -81,
	-42, -202, -202, -202, -202, -202, -202, -202, -202, -202,
	-90, -42, -202, -206, -78, -202, -206, -78, -206, -78,
	-206, -202, -206, -78, -206, -78, -206, -206, -78, -202,
	-202, -202, -202, -202, -202, -62, 30, -61, -44, -45,
	-46, -47, -64, -86, -202, 61, -61, -61, -55, -204,
	59, 11, 57, -204, 59, 117, 59, -109, 170, -110,
	-114, 240, 242, 86, -137, -132, 63, 33, 34, 60,
	59, -61, -149, -152, -154, -153, -155, -150, -151, 190,
	191, 113, 194, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 34, 151, 186, 187, 188, 189, 206,
	207, 208, 209, 210, 211, 212, 213, 173, 192, 269,
	174, 175, 176, 177, 178, 179, 181, 182, 183, 184,
	185, 61, -144, 131, 61, 78, 61, -61, -61, -144,
	163, 163, 128, 128, -61, 59, 132, -55, 27, 56,
	-61, 61, 61, -139, -138, -130, -144, -144, -144, -144,
	-144, -61, -144, -144, -144, -144, 11, -120, 11, 96,
	-42, 56, 9, 96, 59, 18, 117, 59, -97, 28,
	29, -2, -98, -203, -35, -73, -132, 64, 67, -34,
	47, -61, -42, -42, -79, 72, 78, 73, 74, -134,
	104, -139, -133, -130, -72, -80, -83, -86, 68, 96,
	94, 95, 80, -72, -72, -72, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -145, 61,
	63, 61, -71, -71, -132, -40, 25, -39, -41, -203,
	59, -203, -2, -39, -39, -42, -42, -87, 63, -39,
	-87, 63, -39, -39, -33, -88, -89, 82, -87, -132,
	-138, -203, -72, -132, -132, -39, -40, -39, -39, -105,
	157, -61, 34, 59, -57, -59, -58, -60, 46, 50,
	52, 47, 48, 49, 53, -142, 26, -44, -202, -202,
	-141, 157, -140, 26, -105, 57, -44, -61, -44, -63,
	-138, 104, -113, -110, 59, 241, 243, 244, 56, 75,
	-42, -161, 112, -179, -180, -181, -133, 63, 64, -170,
	-171, -172, -182, 143, -187, 136, 138, 135, -173, 144,
	130, 32, 60, -166, 72, 78, -162, 218, -156, 58,
	-156, -156, -156, -156, -160, 193, -160, -160, -160, 58,
	58, -156, -156, -156, -164, 58, -164, -164, -165, 58,
	-165, -136, 57, -61, -144, 27, -144, -126, 125, 122,
	123, -190, 121, 215, 193, 70, 33, 15, 259, 157,
	274, 61, 158, -132, -132, -61, -61, 125, 122, -61,
	-61, -61, -144, -61, -123, 94, 12, -138, -138, -61,
	42, -42, -42, -139, -96, -203, -99, -116, 19, 11,
	38, 38, -39, 72, 73, 74, 117, -202, -80, -72,
	-72, -72, -38, 152, 77, -203, -203, -39, 59, -42,
	-203, -203, -203, 59, 57, 26, 11, 11, -203, 11,
	11, -203, -203, -39, -91, -89, 84, -42, -203, 117,
	-203, 59, 59, -203, -203, -203, -203, -70, 34, 38,
	-2, -202, -202, -108, -112, -87, -45, -46, -46, -45,
	-46, 46, 46, 46, 51, 46, 51, 46, -58, -138,
	-203, -49, -48, -50, -132, -65, 54, 133, 55, -202,
	-140, -66, 12, -44, -66, -66, 117, -114, -115, 245,
	242, 248, 61, 63, 59, -181, 86, 58, 61, 32,
	-173, -173, -174, 61, -174, 32, -158, 33, 72, -163,
	219, 64, -160, -160, -161, 34, -161, -161, -161, -169,
	63, -169, 64, 64, 56, -132, -144, -143, -196, 137,
	143, 144, 139, 61, 130, 32, 136, 138, 157, 135,
	-196, -127, -128, 132, 26, 130, 32, 157, -195, 57,
	163, 163, 132, -144, -120, 63, -42, 43, 117, -61,
	-43, 11, 104, -133, -40, -38, 77, -72, -72, -203,
	-41, -148, 113, 190, 151, 188, 184, 204, 195, 217,
	186, 218, -145, -148, -72, -72, -72, -72, 268, -94,
	85, -42, 83, -133, -72, -72, -107, 56, -108, -82,
	-84, -83, -202, -2, -103, -132, -106, -132, -66, 59,
	86, -53, -52, 56, 57, -54, 56, -52, 46, 46,
	-203, 59, 97, 130, 130, 130, -106, -94, -42, -66,
	242, 246, 247, -180, -181, -184, -183, -132, -187, -174,
	-174, 58, -159, 56, -72, 60, -161, -161, 61, 113,
	60, 59, 60, 59, 60, 59, -61, -143, -143, -61,
	-143, -132, -193, 271, -194, 61, -132, -132, -61, -123,
	-66, -44, -203, -72, -203, -156, -156, -156, -165, -156,
	178, -156, 178, -203, -203, 19, 19, 19, 19, -202,
	-37, 264, -42, 59, 59, 31, -107, 59, -203, -203,
	-203, 59, 117, -203, 59, -94, -112, -42, -42, 58,
	-42, -142, -50, -51, -42, 128, 129, -202, -202, -202,
	-203, -98, 60, 59, -156, -104, -132, -167, 215, 9,
	-160, 63, -160, 64, 64, -144, 30, -192, -191, -133,
	58, -92, 13, -160, 61, -72, -72, -72, -72, -72,
	-203, 63, -72, -72, 32, -84, 38, -2, -202, -132,
	-132, -132, -98, -104, -138, -202, -202, -104, -104, -104,
	-141, -186, -185, 57, 140, 70, -183, 60, 59, -168,
	136, 32, 135, -75, -161, -161, 60, 60, -202, 59,
	86, -104, -93, 14, 16, -203, -203, -203, -203, -36,
	96, 271, -203, -203, 9, -82, -2, 117, 60, -45,
	-87, -203, -203, -203, -65, -185, 61, -175, 86, 63,
	146, -132, -157, 70, 32, 32, -188, -189, 157, -191,
	-181, 60, -100, 162, -42, -81, -203, 269, 53, 272,
	-108, -203, -132, -203, -203, 64, -61, 63, -203, 59,
	-132, -195, -101, -102, 56, 23, 22, 43, 270, 273,
	58, -189, 38, -193, 59, 20, 21, -42, 43, -104,
	159, -102, -42, 271, 60, 160, 272, -198, -199, 56,
	-202, 273, -199, 56, 10, 9, -72, 156, -197, 147,
	142, 145, 34, -197, -203, -203, 141, 33, 72,
}
var yyDef = [...]int{

	23, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 573, 0, 0, 321, 321, 321, 321, 321,
	321, 0, 651, 634, 0, 0, 0, 0, -2, 308,
	309, 0, 311, 312, 880, 880, 880, 880, 880, 0,
	0, 880, 0, 40, 41, 878, 1, 3, 581, 0,
	28, 30, 0, 388, 389, 660, 661, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 0, 325, 328, 323, 0, 634,
	634, 0, 0, 70, 71, 0, 0, 0, 864, 0,
	632, 632, 632, 652, 653, 656, 657, 0, 0, 0,
	635, 0, 630, 0, 630, 630, 630, 0, 258, 402,
	0, 0, 0, 881, 0, 881, 881, 271, 881, 881,
	274, 881, 0, 881, 0, 281, 283, 284, 285, 286,
	0, 290, 881, 305, 306, 295, 307, 310, 313, 314,
	315, 316, 317, 880, 880, 320, 0, 585, 0, 0,
	0, 29, 0, 573, 36, 0, 321, 326, 327, 331,
	329, 330, 322, 0, 339, 343, 0, 411, 0, 416,
	418, -2, -2, 0, 453, 454, 455, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 481, 482, 483,
	484, 558, 559, 560, 561, 562, 563, 564, 565, 420,
	421, 555, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 546, 0, 517, 517, 517, 517, 517, 517,
	517, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 51, 402, 55, 0, 856, 616,
	-2, -2, 0, 0, 658, 659, -2, 772, -2, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 0, 0, 89, 0,
	87, 0, 881, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 259, 881, 881, 262, 882, 883,
	881, 881, 881, 0, 881, 881, 269, 270, 272, 273,
	275, 881, 881, 277, 0, 298, 296, 297, 292, 293,
	0, 287, 288, 291, 318, 319, 35, 879, 24, 0,
	0, 582, 0, 574, 575, 578, 25, 31, 0, 581,
	0, 328, 0, 333, 332, 324, 0, 340, 0, 0,
	0, 344, 0, 346, 347, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 438, 439, 440, 441,
	442, 443, 444, 417, 0, 431, 0, 0, 0, 473,
	474, 475, 476, 477, 478, 479, 0, 335, 0, 0,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 547, 0, 501, 509, 0, 502, 510, 503, 511,
	504, 0, 505, 512, 506, 513, 507, 508, 514, 0,
	0, 0, 335, 0, 0, 53, 0, 401, 0, 350,
	352, 353, 354, -2, 0, 660, 385, -2, 0, 0,
	0, 47, 48, 0, 0, 0, 0, 56, 856, 58,
	59, 0, 0, 0, 167, 625, 626, 627, 623, 211,
	0, 0, 155, 151, 95, 96, 97, 144, 99, 144,
	144, 144, 144, 164, 164, 164, 164, 127, 128, 129,
	130, 131, 0, 0, 114, 144, 144, 144, 118, 134,
	135, 136, 137, 138, 139, 140, 141, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 146, 146, 146, 148,
	148, 654, 73, 0, 881, 0, 881, 85, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 252, 631, 0,
	881, 255, 256, 403, 662, 663, 260, 261, 263, 264,
	265, 266, 267, 268, 276, 280, 0, 301, 0, 0,
	282, 0, 586, 0, 0, 0, 0, 0, 577, 579,
	580, 0, 585, 37, 331, 0, 566, 0, 0, 0,
	334, 33, 412, 413, 415, 432, 0, 434, 436, 345,
	341, 0, 556, -2, 422, 423, 447, 448, 449, 0,
	0, 0, 0, 445, 427, 0, 458, 459, 460, 461,
	462, 463, 464, 465, 466, 467, 468, 469, 472, 531,
	532, 0, 470, 471, 480, 0, 0, 336, 337, 450,
	0, 611, 0, 0, 0, 0, 0, 455, 558, 0,
	455, 558, 0, 0, 0, 553, 550, 0, 0, 555,
	0, 518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 400, 0, 0, 0, 0, 0, 0, 390, 0,
	0, 393, 0, 0, 0, 0, 384, 0, 0, 361,
	405, 824, 386, 0, 409, 0, 409, 50, 409, 52,
	0, 404, 617, 57, 0, 0, 62, 63, 618, 619,
	620, 621, 0, 86, 212, 214, 217, 218, 219, 90,
	91, 92, 0, 0, 199, 0, 0, 193, 193, 0,
	191, 192, 88, 158, 156, 0, 153, 152, 98, 0,
	164, 164, 121, 122, 167, 0, 167, 167, 167, 0,
	0, 115, 116, 117, 109, 0, 110, 111, 112, 0,
	113, 0, 0, 881, 75, 633, 76, 880, 0, 0,
	646, 226, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 0, 77, 228, 230, 229, 0, 0, 0,
	250, 881, 254, 298, 279, 0, 0, 299, 300, 289,
	0, 583, 584, 0, 576, 32, 26, 0, 628, 629,
	567, 568, 348, 433, 435, 437, 0, 335, 424, 445,
	428, 0, 425, 0, 0, 419, 485, 0, 0, 452,
	-2, 488, 489, 0, 0, 0, 0, 0, 524, 0,
	0, 525, 0, 573, 0, 551, 0, 0, 500, 0,
	519, 0, 0, 520, 521, 522, 523, 605, 0, 0,
	596, 0, 0, 409, 613, 0, 351, 379, 381, 0,
	376, 391, 392, 394, 0, 396, 0, 398, 399, 355,
	357, 0, 362, 363, 0, 359, 0, 0, 0, 0,
	387, 573, 0, 409, 45, 46, 0, 60, 61, 0,
	0, 67, 168, 169, 0, 215, 0, 0, 0, 186,
	193, 193, 189, 194, 190, 0, 160, 0, 157, 94,
	154, 0, 167, 167, 123, 0, 124, 125, 126, 0,
	142, 0, 0, 0, 0, 655, 74, 220, 880, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	880, 0, 880, 647, 648, 649, 650, 0, 80, 0,
	0, 0, 0, 253, 301, 302, 303, 587, 0, 27,
	409, 0, 342, 557, 0, 426, 0, 446, 429, 486,
	338, 0, 144, 144, 536, 144, 148, 539, 144, 541,
	144, 544, 0, 0, 0, 0, 0, 0, 0, 548,
	499, 554, 0, 556, 0, 0, 38, 0, 605, 595,
	607, 609, 0, 0, 0, 601, 0, 371, 573, 0,
	0, 373, 380, 0, 0, 374, 0, 375, 395, 397,
	383, 0, 0, 0, 0, 0, 0, 581, 410, 44,
	64, 65, 66, 213, 216, 0, 195, 144, 198, 187,
	188, 0, 162, 0, 159, 145, 119, 120, 165, 166,
	164, 0, 164, 0, 149, 0, 881, 221, 222, 223,
	224, 0, 227, 0, 78, 79, 0, 232, 251, 278,
	569, 349, 487, 430, 490, 533, 164, 537, 538, 540,
	542, 543, 545, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 0, 0, 39, 0, 610, -2,
	0, 0, 0, 54, 0, 581, 614, 615, 377, 0,
	382, 0, 364, 365, 366, 0, 0, 0, 0, 0,
	385, 43, 178, 0, 197, 0, 369, 170, 163, 0,
	167, 143, 167, 0, 0, 72, 0, 81, 82, 0,
	0, 571, 0, 534, 535, 0, 0, 0, 0, 526,
	498, 549, 0, 0, 0, 608, 0, 599, 0, 603,
	602, 372, 42, 0, 358, 0, 0, 0, 0, 0,
	405, 177, 179, 0, 184, 0, 196, 0, 0, 175,
	0, 172, 174, 161, 132, 133, 147, 150, 0, 0,
	0, 0, 588, 0, 0, 493, 495, 494, 496, 0,
	0, 0, 515, 516, 0, 598, 0, 0, 378, 0,
	0, 406, 407, 408, 360, 180, 181, 0, 185, 183,
	0, 370, 93, 0, 171, 173, 0, 245, 0, 83,
	84, 77, 34, 0, 572, 570, 497, 0, 0, 0,
	606, -2, 604, 367, 368, 182, 0, 176, 244, 0,
	0, 80, 589, 590, 0, 0, 0, 527, 0, 530,
	0, 246, 0, 231, 0, 592, 0, 594, 528, 0,
	0, 591, 593, 0, 200, 0, 0, 201, 202, 0,
	0, 529, 203, 0, 0, 0, 0, 0, 204, 206,
	207, 0, 0, 205, 247, 248, 208, 209, 210,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 107, 99, 3,
	58, 60, 104, 102, 59, 103, 117, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 275,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:339
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:344
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:345
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:371
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:377
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = &With{CommonTableExpressions: yyDollar[2].commonTableExpressions, Select: yyDollar[4].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:398
		{
			yyVAL.bytes = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.bytes = []byte(",")
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.commonTableExpressions = []*CommonTableExpression{yyDollar[1].commonTableExpression}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:413
		{
			yyVAL.commonTableExpressions = append(yyDollar[1].commonTableExpressions, yyDollar[3].commonTableExpression)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:419
		{
			yyVAL.commonTableExpression = &CommonTableExpression{Name: yyDollar[1].tableIdent, Select: yyDollar[4].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:426
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:433
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), Trigger: yyDollar[11].triggers}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:439
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:456
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:468
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:480
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:484
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:528
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:537
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:541
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:551
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:555
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:569
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:575
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:583
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:589
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:597
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:607
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:617
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:622
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:628
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:641
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:650
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:654
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:665
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:670
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:687
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:693
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:700
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:707
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:711
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:722
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:726
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:730
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:736
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:963
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:968
		{
			yyVAL.sqlVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:972
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:977
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:981
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:989
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:993
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:999
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1007
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1039
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1052
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1057
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1070
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1079
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1092
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1113
		{
			yyVAL.sqlVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1117
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1147
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1168
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1199
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1213
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1229
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1236
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1240
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1244
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1248
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1254
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1260
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1282
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1287
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1295
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1307
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1311
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1343
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1348
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1421
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1427
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1431
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1437
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1441
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1453
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1457
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1465
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1473
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1478
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1500
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1585
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1590
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1608
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1668
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.str = "full "
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1678
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1688
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1702
		{
			yyVAL.showFilter = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1716
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.str = SessionStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.str = GlobalStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1740
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1744
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.statement = &Commit{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.statement = &Rollback{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1762
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1766
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1778
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1796
		{
			setAllowComments(yylex, true)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1806
		{
			yyVAL.bytes2 = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1810
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = UnionStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = UnionAllStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = UnionDistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = SQLCacheStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1842
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.str = DistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = StraightJoinHint
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1860
		{
			yyVAL.selectExprs = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1864
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1874
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1884
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1892
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1897
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1917
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1945
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1959
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1969
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1974
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1978
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1994
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2028
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2041
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2045
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2049
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2053
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2059
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2061
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2065
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2067
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2071
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2076
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.empty = struct{}{}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2081
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2089
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = JoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = JoinStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = StraightJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = LeftJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2126
		{
			yyVAL.str = LeftJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = RightJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = RightJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = NaturalJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2144
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2179
		{
			yyVAL.indexHints = nil
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2183
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2187
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = nil
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = IsNullStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2302
		{
			yyVAL.str = IsNotNullStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = IsTrueStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = IsNotTrueStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = IsFalseStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = IsNotFalseStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = EqualStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.str = LessThanStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2332
		{
			yyVAL.str = GreaterThanStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			yyVAL.str = LessEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2340
		{
			yyVAL.str = GreaterEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2344
		{
			yyVAL.str = NotEqualStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = nil
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2371
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2377
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2493
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2515
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 496:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 497:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2725
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2729
		{
			yyVAL.str = BooleanModeStr
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2733
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2737
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2741
		{
			yyVAL.str = QueryExpansionStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = nil
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2821
		{
			yyVAL.str = string("")
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2825
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2841
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = nil
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2860
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2864
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &NullVal{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2922
		{
			yyVAL.exprs = nil
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2926
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2940
		{
			yyVAL.orderBy = nil
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2944
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2960
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2965
		{
			yyVAL.str = AscScr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			yyVAL.str = AscScr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.str = DescScr
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2978
		{
			yyVAL.limit = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2986
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2990
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2995
		{
			yyVAL.str = ""
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = ForUpdateStr
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3003
		{
			yyVAL.str = ShareModeStr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3008
		{
			yyVAL.triggers = nil
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3012
		{
			yyVAL.triggers = yyDollar[2].triggers
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.triggers = []Trigger{yyDollar[1].trigger}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.triggers = append(yyDollar[1].triggers, yyDollar[3].trigger)
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3028
		{
			yyVAL.trigger = &WatermarkTrigger{}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3032
		{
			yyVAL.trigger = &DelayTrigger{Delay: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3036
		{
			yyVAL.trigger = &CountingTrigger{Count: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3062
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3066
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3070
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3077
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3081
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3085
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3089
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3094
		{
			yyVAL.updateExprs = nil
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3098
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3124
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3144
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3150
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3160
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3166
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3170
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3174
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3178
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3185
		{
			yyVAL.bytes = []byte("charset")
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3192
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.expr = &Default{}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3209
		{
			yyVAL.byt = 0
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3211
		{
			yyVAL.byt = 1
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3214
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3216
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3219
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.str = IgnoreStr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3246
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3250
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3259
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3266
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3268
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3289
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3540
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3549
		{
			decNesting(yylex)
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3554
		{
			skipToEnd(yylex)
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3559
		{
			skipToEnd(yylex)
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			skipToEnd(yylex)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
